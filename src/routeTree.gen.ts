/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root.tsx';
import { Route as RegisterImport } from './routes/register.tsx';
import { Route as LoginImport } from './routes/login.tsx';
import { Route as AuthImport } from './routes/_auth.tsx';
import { Route as IndexImport } from './routes/index.tsx';
import { Route as ChatIdImport } from './routes/chat.$id.tsx';

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any);

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any);

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

const ChatIdRoute = ChatIdImport.update({
  id: '/chat/$id',
  path: '/chat/$id',
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/_auth': {
      id: '/_auth';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof AuthImport;
      parentRoute: typeof rootRoute;
    };
    '/login': {
      id: '/login';
      path: '/login';
      fullPath: '/login';
      preLoaderRoute: typeof LoginImport;
      parentRoute: typeof rootRoute;
    };
    '/register': {
      id: '/register';
      path: '/register';
      fullPath: '/register';
      preLoaderRoute: typeof RegisterImport;
      parentRoute: typeof rootRoute;
    };
    '/chat/$id': {
      id: '/chat/$id';
      path: '/chat/$id';
      fullPath: '/chat/$id';
      preLoaderRoute: typeof ChatIdImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '': typeof AuthRoute;
  '/login': typeof LoginRoute;
  '/register': typeof RegisterRoute;
  '/chat/$id': typeof ChatIdRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '': typeof AuthRoute;
  '/login': typeof LoginRoute;
  '/register': typeof RegisterRoute;
  '/chat/$id': typeof ChatIdRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/_auth': typeof AuthRoute;
  '/login': typeof LoginRoute;
  '/register': typeof RegisterRoute;
  '/chat/$id': typeof ChatIdRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/' | '' | '/login' | '/register' | '/chat/$id';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '' | '/login' | '/register' | '/chat/$id';
  id: '__root__' | '/' | '/_auth' | '/login' | '/register' | '/chat/$id';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AuthRoute: typeof AuthRoute;
  LoginRoute: typeof LoginRoute;
  RegisterRoute: typeof RegisterRoute;
  ChatIdRoute: typeof ChatIdRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  ChatIdRoute: ChatIdRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/login",
        "/register",
        "/chat/$id"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/chat/$id": {
      "filePath": "chat.$id.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
